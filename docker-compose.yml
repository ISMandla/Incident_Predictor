version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  postgres:
    image: postgres:13
    container_name: incident_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: incident_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  mongo:
    image: mongo:6
    container_name: incident_mongo
    ports:
      - "27017:27017"
    volumes:
      - mongodata:/data/db

  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: fastapi_backend
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - postgres
    volumes:
      - ./FastAPI_Backend:/app

  react:
    build:
      context: .
      dockerfile: Dockerfile.reactor
    container_name: react_dashboard
    ports:
      - "3000:3000"
    depends_on:
      - fastapi

  kafka_consumer_metrics:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: consumer_metrics
    command: python data-processor/kafka_consumer_metrics.py
    depends_on:
      - kafka
      - postgres
    volumes:
      - .:/app

  kafka_consumer_logs:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: consumer_logs
    command: python data-processor/kafka_consumer_logs.py
    depends_on:
      - kafka
      - mongo
    volumes:
      - .:/app

  simulate_metrics:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: simulator_metrics
    command: python data-simulator/simulate_metrics.py
    depends_on:
      - kafka
    volumes:
      - .:/app

  simulate_logs:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: simulator_logs
    command: python data-simulator/simulate_logs.py
    depends_on:
      - kafka
    volumes:
      - .:/app

  incident_predictor:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: incident_predictor
    command: python ml-models/run_incident_predictor.py
    depends_on:
      - kafka
      - postgres
    volumes:
      - .:/app

  alert_engine:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: alert_engine
    command: python Alerts_Automation/alert_engine.py
    depends_on:
      - kafka
      - postgres
    volumes:
      - .:/app

volumes:
  pgdata:
  mongodata:


networks:
  incident_net:
    driver: bridge
